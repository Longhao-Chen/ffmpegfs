= FFMPEGFS(1) =
:doctype:       manpage
:man source:    ffmpegfs
:man version:   {revnumber}
:man manual:    User Commands

== NAME ==
ffmpegfs - mounts and transcodes a multitude of formats to one of the target formats on the fly

== SYNOPSIS ==
*ffmpegfs* ['OPTION']... 'IN_DIR' 'OUT_DIR'

== DESCRIPTION ==
The ffmpegfs(1) command will mount the directory 'IN_DIR' on 'OUT_DIR'.
Thereafter, accessing 'OUT_DIR' will show the contents of 'IN_DIR', with
all supported media files transparently renamed and transcoded to one of
the supported target formats upon access.

Supported output formats:

 * MP4 (MPEG-4)
 * WebM
 * OGG
 * MOV (QuickTime File Format)
 * Prores (a MOV container for Apple Prores video & PCM audio)
 * Opus (audio only)
 * MP3 (MPEG-2 Audio Layer III)
 * WAV (Waveform Audio File Format)
 * AIFF (Audio Interchange File Format)
 * FLAC (Free Lossless Audio Compression)
 * ALAC (Apple Lossless Audio Codec)
 * JPG (video to frameset)
 * PNG (video to frameset)
 * BMP (video to frameset)
 * TS (MPEG transport stream)
 * HLS (HTTP Live Streaming)

== OPTIONS ==

Usage: ffmpegfs [OPTION]... IN_DIR OUT_DIR

Mount IN_DIR on OUT_DIR, converting audio/video files upon access.

=== Encoding options ===
*--desttype*=TYPE, *-odesttype*=TYPE::
Select destination format. 'TYPE' can currently be:
+
*MP4*, *MP3*, *OGG*, *WEBM*, *MOV*, *PRORES*, *AIFF*, *FLAC*, *ALAC*, *OPUS*, *WAV*, *JPG*, *PNG*, *BMP*, *TS* or *HLS*.
+
To stream videos, *MP4*, *TS*, *HLS*, *OGG*, *WEBM* or *MOV*/*PRORES* must be selected.
+
To use HTTP Live Streaming, set *HLS*.
+
When a destination *JPG*, *PNG* or *BMP* is chosen, all frames of a video source file will be presented in a virtual directory named after the source file. Audio will no be available.
+
To use the smart transcoding feature, specify a video and audio file type, separated by a "+" sign. For example, --desttype=mov+aiff will convert video files to Apple Quicktime MOV and audio only files to AIFF.
+
Default: *mp4*

*--audiocodec*=TYPE, *-oaudiocodec*=TYPE::
Select audio codec. 'TYPE' depends on the destination format and can currently be:
+
[width="100%"]
|===================================================================================
| *Formats* | *Audio Codecs*
| MP4 | **AAC**, MP3
| WebM | **OPUS**, VORBIS
| MOV | **AAC**, AC3, MP3
| TS, HLS | **AAC**, AC3, MP3
|===================================================================================
+
Other destination formats do not support other codecs than the default.
+
Default: The default setting for the destination format, see bold codec name in table

*--videocodec*=TYPE, *-ovideocodec*=TYPE::
Select video codec. 'TYPE' depends on the destination format and can currently be:
+
[width="100%"]
|===================================================================================
| *Formats* | *Video Codecs*
| MP4 | **H264**, H265, MPEG1, MPEG2
| WebM | **VP9**, VP8, AV1
| MOV | **H264**, H265, MPEG1, MPEG2
| TS, HLS | **H264**, H265, MPEG1, MPEG2
|===================================================================================
+
Other destination formats do not support other codecs than the default.
+
Default: The default setting for the destination format, see bold codec name in table

*--autocopy*=OPTION, *-oautocopy*=OPTION::
Select auto copy option, 'OPTION' can be:
+
[width="100%"]
|===================================================================================
|*OFF* |Never copy streams, transcode always.
|*MATCH* |Copy stream if target supports codec.
|*MATCHLIMIT* |Same as MATCH, only copy if target not larger, transcode otherwise.
|*STRICT* |Copy stream if codec matches desired target, transcode otherwise.
|*STRICTLIMIT* |Same as STRICT, only copy if target not larger, transcode otherwise.
|===================================================================================
+
This can speed up transcoding significantly as copying streams uses much less computing power as compared to transcoding.
+
*MATCH* copies a stream if the target supports it, e.g. an AAC audio stream will be copied to MPEG although FFmpeg's target format is MP3 for this container. H264 would be copied to ProRes although the result will be a regular MOV/MP4, not a ProRes file.
+
*STRICT* would convert AAC to MP3 for MPEG or H264 to ProRes for Prores files to strictly adhere to the output format setting. This will create homogenous results which might prevent problems with picky playback software.
+
Default: *OFF*

*--recodesame*=OPTION, *-orecodesame*=OPTION::
Select recode to same format option, 'OPTION' can be:
+
[width="100%"]
|===================================================================================
|*NO* |Never recode to same format.
|*YES* |Always recode to same format.
|===================================================================================
+
Default: *NO*

*--profile*=NAME, *-oprofile*=NAME::
Set profile for target audience, 'NAME' can be:
+
[width="100%"]
|=======================================================
|*NONE* |no profile
|*FF* |optimise for Firefox
|*EDGE* |optimise for MS Edge and Internet Explorer > 11
|*IE* |optimise for MS Edge and Internet Explorer <= 11
|*CHROME* |Google Chrome
|*SAFARI* |Apple Safari
|*OPERA* |Opera
|*MAXTHON* |Maxthon
|=======================================================
+
*Note:* Applies to MP4 output format only, ignored for all other formats.
+
Default: *NONE*

--*level*=NAME, -o *level*=NAME::
Set level for output if available, 'NAME' can be:
+
[width="100%"]
|===========================
|*PROXY* |Proxy – apco
|*LT* |LT – apcs
|*STANDARD* |standard – apcn
|*HQ* |HQ - apch
|===========================
+
*Note:* Applies to MP4 output format only, ignored for all other formats.
+
Default: *HQ*

=== Audio Options ===
*--audiobitrate*=BITRATE, *-o audiobitrate*=BITRATE::
Audio encoding bitrate.
+
Default: *128 kbit*
+
*Acceptable values for 'BITRATE':*
+
*mp4:* 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 288, 320, 352, 384, 416 and 448 kbps.
+
*mp3:* For sampling frequencies of 32, 44.1, and 48 kHz, 'BITRATE' can be among 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, and 320 kbps.
+
For sampling frequencies of 16, 22.05, and 24 kHz, 'BITRATE' can be among 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, and 160 kbps.
+
When in doubt, it is recommended to choose a bitrate among 96, 112, 128, 160, 192, 224, 256, and 320 kbps.
+
*BITRATE* can be defined as...
* n bit/s:  #  or #bps
* n kbit/s: #K or #Kbps
* n Mbit/s: #M or #Mbps

*--audiosamplerate*=SAMPLERATE, *-o audiosamplerate*=SAMPLERATE::
Limits the output sample rate to 'SAMPLERATE'. If the source file sample rate is more it will be downsampled automatically.
+
Typical values are 8000, 11025, 22050, 44100, 48000, 96000, 192000.
+
If the target codec does not support the selected sample rate, the next matching rate will be chosen (e.g. if 24K is selected ut only 22.05 or 44.1 KHz supported, 22.05 KHz will be set).
+
Set to 0 to keep source rate.
+
Default: *44.1 kHz*
+
*SAMPLERATE* can be defined as...
 * In Hz:  #  or #Hz
 * In kHz: #K or #KHz

*--audiochannels*=CHANNELS, *-o audiochannels*=CHANNELS::
Limits the number of output channels to 'CHANNELS'. If the source has more channels, the number will be reduced to this limit.
+
Typical values are 1, 2 or 6 (e.g. 5.1) channels.
+
If the target codec does not support the selected number of channels, transcoding may fail.
+
Set to 0 to keep the number of channels.
+
Default: *2 channels (stereo)*

*--audiosamplefmt*=SAMPLEFMT, *-o audiosamplefmt*=SAMPLEFMT::
Set sample format. 'SAMPLEFMT' can be:
+
0 to use the predefined setting, 8, 16, 32, 64 for integer format, F16, F32, F64 for floating point
+
Not all formats are supported by all destination types, selecting an invalid format for will be reported as command line error and a list of values printed.
+
[width="100%"]
|===========================
|*Container Format* | *Sample Format*
|*AIFF* |0, 16, 32
|*ALAC* |0, 16, 24
|*WAV* |0, 8, 16, 32, 64, F16, F32, F64
|*FLAC* |0, 16, 24
|===========================
+
Default: 0 (Use same as source or the predefined format of the destination if source format is not possible).

=== Video Options ===
*--videobitrate*=BITRATE, *-o videobitrate*=BITRATE::
Video encoding bit rate. Setting this too high or low may cause transcoding to fail.
+
Default: *2 Mbit*
+
*mp4:* May be specified as 500 to 25000 kbit.
+
*BITRATE* can be defined as...
 * n bit/s:  #  or #bps
 * n kbit/s: #K or #Kbps
 * n Mbit/s: #M or #Mbps

*--videoheight*=HEIGHT, -o *videoheight*=HEIGHT::
Sets the height of the transcoded video.
+
When the video is rescaled the aspect ratio is preserved if --width is not set at the same time.
+
Default: *keep source video height*

*--videowidth*=WIDTH, -o *videowidth*=WIDTH::
Sets the width of the transcoded video.
+
When the video is rescaled the aspect ratio is preserved if --height is not set at the same time.
+
Default: *keep source video width*

*--deinterlace*, -o *deinterlace*::
Deinterlace video if necessary while transcoding.
+
May need higher bit rate, but will increase picture quality when streaming via HTML5.
+
Default: *no deinterlace*

=== HLS Options ===
*--segment_duration*, -o *segment_duration*::
Set duration of one video segment of HLS stream. This argument is a floating point value,
e.g can be set to 2.5 for 2500 milliseconds.
+
Should normally be left at default.
+
*Note:* Applies to HLS output format only, ignored for all other formats.
+
Default: *10 seconds*

*--min_seek_time_diff*, -o *min_seek_time_diff*::
If requested HLS segment is less than min_seek_time seconds away,  discard seek request.
The segment will be available very soon anyway, and that seek makes a re-transcode
necessary. Set to 0 to disable.
+
Should normally be left at default.
+
*Note:* Applies to HLS output format only, ignored for all other formats.
+
Default: *30 seconds*

=== Hardware Acceleration Options ===
*--hwaccel_enc*=API, *-o hwaccel_enc*=API::
Select the hardware acceleration API for encoding.
+
Default: *NONE* (no acceleration)
+
*API*:: can be defined as...
 * *NONE*: use software encoder
 * *VAAPI*: Video Acceleration API (VA-API)
 * *OMX*: OpenMAX (Open Media Acceleration)

*--hwaccel_dec_blocked*=CODEC[:PROFILE[:PROFILE]], *-o hwaccel_dec_blocked*=CODEC:[:PROFILE[:PROFILE]]::
Block codec and optionally profile from hardware decoding. Option can be
repeated to block several codecs
+
Default: no codecs blocked
+
*CODEC*:: can be defined as...
 * *H263*:  H.263
 * *H264*:  H.264
 * *HEVC*:  H.265 / HEVC
 * *MPEG2*: MPEG-2 video
 * *MPEG4*: MPEG-4 video
 * *VC1*:   SMPTE VC-1
 * *VP8*:   Google VP9
 * *VP9*:   Google VP9
 * *WMV3*:  Windows Media Video 9
+
*PROFILE*:: can optionally be added to block a certain profile only.
+
Example: VP9:0 blocks Google VP profile 0
+
Example: H264:1:33 blocks H.264 profile 1 and 33

*--hwaccel_enc_device*=DEVICE, -o *hwaccel_enc_device*=DEVICE::
Select the hardware acceleration device. May be required for VAAPI, especially
if more the one device is available.
+
*Note:* Applies to VAAPI hardware acceleration only, ignored for all other types.
+
Default: *empty* (use default device)
+
Example: */dev/dri/renderD128*

*--hwaccel_dec*=API, *-o hwaccel_dec*=API::
Select the hardware acceleration API for decoding.
+
Default: *NONE* (no acceleration)
+
*API*:: can be defined as...
 * *NONE*: use software decoder
 * *VAAPI*: Video Acceleration API (VA-API)
 * *MMAL*: Multimedia Abstraction Layer by Broadcom

*--hwaccel_dec_device*=DEVICE, -o *hwaccel_dec_device*=DEVICE::
Select the hardware acceleration device. May be required for VAAPI, especially
if more the one device is available.
+
*Note:* Applies to VAAPI hardware acceleration only, ignored for all other types.
+
Default: *empty* (use default device)
+
Example: */dev/dri/renderD128*

=== Album Arts ===
--*noalbumarts*, -o *noalbumarts*::
Do not copy album arts into output file.
+
This will reduce the file size, may be useful when streaming via HTML5 when album arts are not used anyway.
+
Default: *add album arts*

=== Virtual Script ===
--*enablescript*, -o *enablescript*::
Add virtual index.php to every directory. It reads scripts/videotag.php from the FFmpegfs binary directory.
+
This can be very handy to test video playback. Of course, feel free to replace videotag.php with your own script.
+
Default: *Do not generate script file*

--*scriptfile*, -o *scriptfile*::
Set the name of the virtual script created in each directory.
+
Default: *index.php*

--*scriptsource*, -o *scriptsource*::
Take a different source file.
+
Default: *scripts/videotag.php*

=== Cache Options ===
*--expiry_time*=TIME, *-o expiry_time*=TIME::
Cache entries expire after 'TIME' and will be deleted to save disk space.
+
Default: *1 week*

*--max_inactive_suspend*=TIME, *-o max_inactive_suspend*=TIME::
While being accessed the file is transcoded to the target format in the background. When the client quits transcoding will continue until this time out. Transcoding is suspended until it is accessed again, then transcoding will continue.
+
Default: *15 seconds*

*--max_inactive_abort*=TIME, *-o max_inactive_abort*=TIME::
While being accessed the file is transcoded in the background to the target format. When the client quits transcoding will continue until this time out, then the transcoder thread quits.
+
Default: *30 seconds*

*--prebuffer_size*=SIZE, *-o prebuffer_size*=SIZE::
Files will be decoded until the buffer contains this much bytes allowing playback to start smoothly without lags.
+
Set to 0 to disable pre-buffering.
+
Default: *100 KB*

*--max_cache_size*=SIZE, *-o max_cache_size*=SIZE::
Set the maximum diskspace used by the cache. If the cache would grow beyond this limit when a file is transcoded, old entries will be deleted to keep the cache within the size limit.
+
Default: *unlimited*

*--min_diskspace*=SIZE, *-o min_diskspace*=SIZE::
Set the required diskspace on the cachepath mount. If the remaining space would fall below 'SIZE' when a file is transcoded, old entries will be deleted to keep the diskspace within the limit.
+
Default: *0 (no minimum space)*

*--cachepath*=DIR, *-o cachepath*=DIR::
Sets the disk cache directory to 'DIR'. Will be created if not existing. The user running FFmpegfs must have write access to the location.
+
Default: *${XDG_CACHE_HOME:-~/.cache}/ffmpegfs* (as specified in the XDG Base Directory Specification). Falls back to ${HOME:-~/.cache}/ffmpegfs if not defined. If executed with root privileges, "/var/cache/ffmpegfs" will be used.

*--disable_cache*, -o *disable_cache*::
Disable the cache functionality completely.
+
Default: *enabled*

*--cache_maintenance*=TIME, *-o cache_maintenance*=TIME::
Starts cache maintenance in 'TIME' intervals. This will enforce the expery_time, max_cache_size and min_diskspace settings. Do not set too low as this can slow down transcoding.
+
Only one FFmpegfs process will do the maintenance by becoming the master. If that process exits, another will take over so that always one will do the maintenance.
+
Default: *1 hour*

*--prune_cache*::
Prune cache immediately according to the above settings at application start up.

*--clear_cache*, *-o clear_cache*::
Clear cache on start up. All previously transcoded files will be deleted.
+
*TIME* can be defined as...
  * Seconds: #
  * Minutes: #m
  * Hours:   #h
  * Days:    #d
  * Weeks:   #w
+
*SIZE* can be defined as...
  * In bytes:  # or #B
  * In KBytes: #K or #KB
  * In MBytes: #M or #MB
  * In GBytes: #G or #GB
  * In TBytes: #T or #TB

=== Other ===
*--max_threads*=COUNT, *-o max_threads*=COUNT::
Limit concurrent transcoder threads. Set to 0 for unlimited threads. Recommended values are up to 16 times number of CPU cores. Should be left at default.
+
Default: *16 times number of detected cpu cores*

*--decoding_errors*, *-o decoding_errors*::
Decoding errors are normally ignored, leaving bloopers and hiccups in encoded audio or video but yet creating a valid file. When this option is set, transcoding will stop with an error.
+
Default: *Ignore errors*

*--min_dvd_chapter_duration*=SECONDS, *-o min_dvd_chapter_duration*=SECONDS::
Ignores DVD chapters shorter than SECONDS. Set to 0 to disable. This avoids transcoding errors for DVD chapters too
short to detect its streams.
+
Default: *1 second*

*--win_smb_fix*, *-o win_smb_fix*::
Windows seems to access the files on Samba drives starting at the last 64K segment simply when the file is opened. Setting --win_smb_fix=1 will ignore these attempts (not decode the file up to this point).
+
Default: *on*

=== Logging ===
*--log_maxlevel*=LEVEL, *-o log_maxlevel*=LEVEL::
Maximum level of messages to log, either ERROR, WARNING, INFO, DEBUG or TRACE. Defaults to INFO, and always set to DEBUG in debug mode.
+
Note that the other log flags must also be set to enable logging.

*--log_stderr*, *-o log_stderr*::
Enable outputting logging messages to stderr. Automatically enabled in debug mode.

*--log_syslog*, *-o log_syslog*::
Enable outputting logging messages to syslog.

*--logfile*=FILE, *-o logfile*=FILE::
File to output log messages to. By default, no file will be written.

=== General/FUSE options ===
*-d*, *-o debug*::
Enable debug output. This will result in a large quantity of diagnostic information being printed to stderr as the program runs. It implies *-f*.

*-f*::
Run in foreground instead of detaching from the terminal.

*-h*, *--help*::
Print usage information.

*-V*, *--version*::
Output version information.

*-c*, *--capabilities*::
Output FFmpeg capabilities: list on the system available codecs.

*-s*::
Force single-threaded operation.

== Usage ==
Mount your filesystem like this:

    ffmpegfs [--audiobitrate bitrate] [--videobitrate bitrate] musicdir mountpoint [-o fuse_options]

For example,

    ffmpegfs --audiobitrate 256K -videobitrate 2000000 /mnt/music /mnt/ffmpegfs -o allow_other,ro

In recent versions of FUSE and FFmpegfs, the same can be achieved with the
following entry in `/etc/fstab`:

    ffmpegfs#/mnt/music /mnt/ffmpegfs fuse allow_other,ro,audiobitrate=256K,videobitrate=2000000 0 0

Another (more modern) form of this command:

    /mnt/music /mnt/ffmpegfs fuse.ffmpegfs allow_other,ro,audiobitrate=256K,videobitrate=2000000 0 0

At this point files like `/mnt/music/{empty}*.flac` and `/mnt/music/{empty}*.ogg` will
show up as `/mnt/ffmpegfs/{empty}*.mp4`.

Note that the "allow_other" option by default can only be used by root.
You must either run FFmpegfs as root or better add a "user_allow_other" key
to /etc/fuse.conf.

"allow_other" is required to permit any user access to the mount, by
default this is only possible for the user who launched FFmpegfs.

== HOW IT WORKS ==
When a file is opened, the decoder and encoder are initialised and the file metadata is read. At this time the final filesize can be determined approximately. This works well for MP3, AIFF or WAV output files, but only fair to good for MP4 or WebM because the actual size heavily depends on the content encoded.

As the file is read, it is transcoded into an internal per-file buffer. This buffer continues to grow while the file is being read until the whole file is transcoded in memory. Once decoded the file is kept in a disk buffer and can be accessed very fast.

Transcoding is done in an extra thread, so if other processes should access the same file they will share the same transcoded data, saving CPU time. If all processes close the file before its end, transcoding will continue for some time. If the file is accessed again before timeout, transcoding will continue, if not it stops and the chunk created so far discarded to save disk space.

Seeking within a file will cause the file to be transcoded up to the seek point (if not already done). This is not usually a problem since most programs will read a file from start to finish. Future enhancements may provide true random seeking (but if this is feasible is yet unclear due to restrictions to positioning inside compressed streams).

MP3: ID3 version 2.4 and 1.1 tags are created from the comments in the source file. They are located at the start and end of the file respectively.

MP4: Same applies to meta atoms in MP4 containers.

MP3 target only: A special optimisation is made so that applications which scan for id3v1 tags do not have to wait for the whole file to be transcoded before reading the tag. This dramatically speeds up such applications.

WAV: A pro format WAV header will be created with estimates of the WAV file size. This header will be replaced when the file is finished. It does not seem necessary, though, as most modern players obviously ignore this information and play the file anyway.

== ABOUT OUTPUT FORMATS ==

A few words to the supported output formats. There is not much to say about the MP3 output as these are regular constant bitrate (CBR) MP3 files with no strings attached. They should play well in any modern player.

MP4 files are special, though, as regular MP4s are not quite suited for live streaming. Reason being that the start block of an MP4 contains a field with the size of the compressed data section. Suffice to say that this field cannot be filled in until the size is known, which means compression must be completed first, a file seek done to the beginning, and the size atom updated.

For a continuous live stream, that size will never be known. For our transcoded files one would have to wait for the whole file to be recoded to get that value. If that was not enough some important pieces of information are located at the end of the file, including meta tags with artist, album, etc. Also, there is only one big data block, a fact that hampers random seek inside the contents without having the complete data section.

Subsequently many applications will go to the end of an MP4 to read important information before going back to the head of the file and start playing. This will break the whole transcode-on-demand idea of FFmpegfs.

To get around the restriction several extensions have been developed, one of which is called "faststart" that relocates the aforementioned meta data from the end to the beginning of the MP4. Additionally, the size field can be left empty (0). isml (smooth live streaming) is another extension.

For direct to stream transcoding several new features in MP4 need to be active (ISMV, faststart, separate_moof/empty_moov to name them) which are not implemented in older versions of FFmpeg (or if available, not working properly).

By default faststart files will be created with an empty size field so that the file can be started to be written out at once instead of encoding it as a whole before this is possible. Encoding it completely would mean it would take some time before playback can start.

The data part is divided into chunks of about 1 second length, each with its own header, thus it is possible to fill in the size fields early enough.

As a draw back not all players support the format, or play it with strange side effects. VLC plays the file, but updates the time display every few seconds only. When streamed over HTML5 video tags, sometimes there will be no total time shown, but that is OK, as long as the file plays. Playback cannot be positioned past the current playback position, only backwards.

But that's the price of starting playback fast.

== DEVELOPMENT ==
FFmpegfs uses Git for revision control. You can obtain the full repository
with:

    git clone https://github.com/nschlia/ffmpegfs.git

FFmpegfs is written in a little bit of C and mostly C++11. It uses the following libraries:

* http://fuse.sourceforge.net/[FUSE]

FFmpeg home pages:

* https://www.ffmpeg.org/[FFmpeg]

== Future Plans ==
* Create a windows version

== FILES ==
*/usr/local/bin/ffmpegfs*, */etc/fstab*

== AUTHORS ==
This fork with FFmpeg support is maintained by
mailto:nschlia@oblivion-software.de[Norbert Schlia] since 2017.

Based on work by K. Henriksson (from 2008 to 2017) and the original author
David Collett (from 2006 to 2008).

Many thanks to them for the original work!

== LICENSE ==
This program can be distributed under the terms of the GNU GPL version 3
or later. It can be found http://www.gnu.org/licenses/gpl-3.0.html[online]
or in the COPYING file.

This file and other documentation files can be distributed under the terms of
the GNU Free Documentation License 1.3 or later. It can be found
http://www.gnu.org/licenses/fdl-1.3.html[online] or in the COPYING.DOC file.

== FFMPEG LICENSE ==
FFmpeg is licensed under the GNU Lesser General Public License (LGPL)
version 2.1 or later. However, FFmpeg incorporates several optional
parts and optimizations that are covered by the GNU General Public
License (GPL) version 2 or later. If those parts get used the GPL
applies to all of FFmpeg.

See https://www.ffmpeg.org/legal.html for details.

== COPYRIGHT ==
This fork with FFmpeg support copyright \(C) 2017-2021
mailto:nschlia@oblivion-software.de[Norbert Schlia].

Based on work copyright \(C) 2006-2008 David Collett, 2008-2013
K. Henriksson.

Much thanks to them for the original work!

This is free software: you are free to change and redistribute it under
the terms of the GNU General Public License (GPL) version 3 or later.

This manual is copyright \(C) 2010-2011 K. Henriksson and \(C) 2017-2021
by N. Schlia and may be distributed under the GNU Free Documentation
License (GFDL) 1.3 or later with no invariant sections, or alternatively under the
GNU General Public License (GPL) version 3 or later.
